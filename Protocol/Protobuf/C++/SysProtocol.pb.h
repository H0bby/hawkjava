// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SysProtocol.proto

#ifndef PROTOBUF_SysProtocol_2eproto__INCLUDED
#define PROTOBUF_SysProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SysProtocol_2eproto();
void protobuf_AssignDesc_SysProtocol_2eproto();
void protobuf_ShutdownFile_SysProtocol_2eproto();

class DataWarpper;
class KeyExchange;

enum PID {
  DATA_WRAPPER = 1,
  KEY_EXCHANGE = 2
};
bool PID_IsValid(int value);
const PID PID_MIN = DATA_WRAPPER;
const PID PID_MAX = KEY_EXCHANGE;
const int PID_ARRAYSIZE = PID_MAX + 1;

const ::google::protobuf::EnumDescriptor* PID_descriptor();
inline const ::std::string& PID_Name(PID value) {
  return ::google::protobuf::internal::NameOfEnum(
    PID_descriptor(), value);
}
inline bool PID_Parse(
    const ::std::string& name, PID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PID>(
    PID_descriptor(), name, value);
}
// ===================================================================

class DataWarpper : public ::google::protobuf::Message {
 public:
  DataWarpper();
  virtual ~DataWarpper();

  DataWarpper(const DataWarpper& from);

  inline DataWarpper& operator=(const DataWarpper& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataWarpper& default_instance();

  void Swap(DataWarpper* other);

  // implements Message ----------------------------------------------

  DataWarpper* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataWarpper& from);
  void MergeFrom(const DataWarpper& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:DataWarpper)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SysProtocol_2eproto();
  friend void protobuf_AssignDesc_SysProtocol_2eproto();
  friend void protobuf_ShutdownFile_SysProtocol_2eproto();

  void InitAsDefaultInstance();
  static DataWarpper* default_instance_;
};
// -------------------------------------------------------------------

class KeyExchange : public ::google::protobuf::Message {
 public:
  KeyExchange();
  virtual ~KeyExchange();

  KeyExchange(const KeyExchange& from);

  inline KeyExchange& operator=(const KeyExchange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyExchange& default_instance();

  void Swap(KeyExchange* other);

  // implements Message ----------------------------------------------

  KeyExchange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyExchange& from);
  void MergeFrom(const KeyExchange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes keys = 1;
  inline bool has_keys() const;
  inline void clear_keys();
  static const int kKeysFieldNumber = 1;
  inline const ::std::string& keys() const;
  inline void set_keys(const ::std::string& value);
  inline void set_keys(const char* value);
  inline void set_keys(const void* value, size_t size);
  inline ::std::string* mutable_keys();
  inline ::std::string* release_keys();
  inline void set_allocated_keys(::std::string* keys);

  // @@protoc_insertion_point(class_scope:KeyExchange)
 private:
  inline void set_has_keys();
  inline void clear_has_keys();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* keys_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SysProtocol_2eproto();
  friend void protobuf_AssignDesc_SysProtocol_2eproto();
  friend void protobuf_ShutdownFile_SysProtocol_2eproto();

  void InitAsDefaultInstance();
  static KeyExchange* default_instance_;
};
// ===================================================================


// ===================================================================

// DataWarpper

// optional bytes data = 1;
inline bool DataWarpper::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataWarpper::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataWarpper::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataWarpper::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& DataWarpper::data() const {
  return *data_;
}
inline void DataWarpper::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void DataWarpper::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void DataWarpper::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataWarpper::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* DataWarpper::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataWarpper::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// KeyExchange

// optional bytes keys = 1;
inline bool KeyExchange::has_keys() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeyExchange::set_has_keys() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeyExchange::clear_has_keys() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeyExchange::clear_keys() {
  if (keys_ != &::google::protobuf::internal::kEmptyString) {
    keys_->clear();
  }
  clear_has_keys();
}
inline const ::std::string& KeyExchange::keys() const {
  return *keys_;
}
inline void KeyExchange::set_keys(const ::std::string& value) {
  set_has_keys();
  if (keys_ == &::google::protobuf::internal::kEmptyString) {
    keys_ = new ::std::string;
  }
  keys_->assign(value);
}
inline void KeyExchange::set_keys(const char* value) {
  set_has_keys();
  if (keys_ == &::google::protobuf::internal::kEmptyString) {
    keys_ = new ::std::string;
  }
  keys_->assign(value);
}
inline void KeyExchange::set_keys(const void* value, size_t size) {
  set_has_keys();
  if (keys_ == &::google::protobuf::internal::kEmptyString) {
    keys_ = new ::std::string;
  }
  keys_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeyExchange::mutable_keys() {
  set_has_keys();
  if (keys_ == &::google::protobuf::internal::kEmptyString) {
    keys_ = new ::std::string;
  }
  return keys_;
}
inline ::std::string* KeyExchange::release_keys() {
  clear_has_keys();
  if (keys_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = keys_;
    keys_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void KeyExchange::set_allocated_keys(::std::string* keys) {
  if (keys_ != &::google::protobuf::internal::kEmptyString) {
    delete keys_;
  }
  if (keys) {
    set_has_keys();
    keys_ = keys;
  } else {
    clear_has_keys();
    keys_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PID>() {
  return ::PID_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SysProtocol_2eproto__INCLUDED
