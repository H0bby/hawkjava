// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SysProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SysProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* DataWarpper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataWarpper_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyExchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyExchange_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SysProtocol_2eproto() {
  protobuf_AddDesc_SysProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SysProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  DataWarpper_descriptor_ = file->message_type(0);
  static const int DataWarpper_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataWarpper, data_),
  };
  DataWarpper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataWarpper_descriptor_,
      DataWarpper::default_instance_,
      DataWarpper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataWarpper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataWarpper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataWarpper));
  KeyExchange_descriptor_ = file->message_type(1);
  static const int KeyExchange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyExchange, keys_),
  };
  KeyExchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyExchange_descriptor_,
      KeyExchange::default_instance_,
      KeyExchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyExchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyExchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyExchange));
  PID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SysProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataWarpper_descriptor_, &DataWarpper::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyExchange_descriptor_, &KeyExchange::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SysProtocol_2eproto() {
  delete DataWarpper::default_instance_;
  delete DataWarpper_reflection_;
  delete KeyExchange::default_instance_;
  delete KeyExchange_reflection_;
}

void protobuf_AddDesc_SysProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021SysProtocol.proto\"\033\n\013DataWarpper\022\014\n\004da"
    "ta\030\001 \001(\014\"\033\n\013KeyExchange\022\014\n\004keys\030\001 \001(\014*)\n"
    "\003PID\022\020\n\014DATA_WRAPPER\020\001\022\020\n\014KEY_EXCHANGE\020\002"
    "B\030\n\026com.hawk.game.protocol", 146);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SysProtocol.proto", &protobuf_RegisterTypes);
  DataWarpper::default_instance_ = new DataWarpper();
  KeyExchange::default_instance_ = new KeyExchange();
  DataWarpper::default_instance_->InitAsDefaultInstance();
  KeyExchange::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SysProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SysProtocol_2eproto {
  StaticDescriptorInitializer_SysProtocol_2eproto() {
    protobuf_AddDesc_SysProtocol_2eproto();
  }
} static_descriptor_initializer_SysProtocol_2eproto_;
const ::google::protobuf::EnumDescriptor* PID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PID_descriptor_;
}
bool PID_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int DataWarpper::kDataFieldNumber;
#endif  // !_MSC_VER

DataWarpper::DataWarpper()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataWarpper::InitAsDefaultInstance() {
}

DataWarpper::DataWarpper(const DataWarpper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataWarpper::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataWarpper::~DataWarpper() {
  SharedDtor();
}

void DataWarpper::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void DataWarpper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataWarpper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataWarpper_descriptor_;
}

const DataWarpper& DataWarpper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SysProtocol_2eproto();
  return *default_instance_;
}

DataWarpper* DataWarpper::default_instance_ = NULL;

DataWarpper* DataWarpper::New() const {
  return new DataWarpper;
}

void DataWarpper::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataWarpper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataWarpper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataWarpper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataWarpper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataWarpper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataWarpper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataWarpper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataWarpper::MergeFrom(const DataWarpper& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataWarpper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataWarpper::CopyFrom(const DataWarpper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataWarpper::IsInitialized() const {

  return true;
}

void DataWarpper::Swap(DataWarpper* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataWarpper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataWarpper_descriptor_;
  metadata.reflection = DataWarpper_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeyExchange::kKeysFieldNumber;
#endif  // !_MSC_VER

KeyExchange::KeyExchange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeyExchange::InitAsDefaultInstance() {
}

KeyExchange::KeyExchange(const KeyExchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeyExchange::SharedCtor() {
  _cached_size_ = 0;
  keys_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyExchange::~KeyExchange() {
  SharedDtor();
}

void KeyExchange::SharedDtor() {
  if (keys_ != &::google::protobuf::internal::kEmptyString) {
    delete keys_;
  }
  if (this != default_instance_) {
  }
}

void KeyExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyExchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyExchange_descriptor_;
}

const KeyExchange& KeyExchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SysProtocol_2eproto();
  return *default_instance_;
}

KeyExchange* KeyExchange::default_instance_ = NULL;

KeyExchange* KeyExchange::New() const {
  return new KeyExchange;
}

void KeyExchange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_keys()) {
      if (keys_ != &::google::protobuf::internal::kEmptyString) {
        keys_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes keys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_keys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeyExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes keys = 1;
  if (has_keys()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->keys(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeyExchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes keys = 1;
  if (has_keys()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->keys(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeyExchange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes keys = 1;
    if (has_keys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->keys());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyExchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyExchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyExchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyExchange::MergeFrom(const KeyExchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keys()) {
      set_keys(from.keys());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyExchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyExchange::CopyFrom(const KeyExchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyExchange::IsInitialized() const {

  return true;
}

void KeyExchange::Swap(KeyExchange* other) {
  if (other != this) {
    std::swap(keys_, other->keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyExchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyExchange_descriptor_;
  metadata.reflection = KeyExchange_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
